// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EuNet.CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Threading.Tasks;
using EuNet.Core;
using EuNet.Rpc;
#if UNITY_EDITOR || UNITY_STANDALONE || UNITY_ANDROID || UNITY_IOS
using EuNet.Unity;
using UnityEngine;
#endif

#region SampleGameCommon.ILoginRpc

namespace SampleGameCommon
{
    public interface ILoginRpc_NoReply
    {
        void GetUserInfo();
        void Login(string id, EuNet.Core.ISession session);
    }

    public enum ILoginRpc_Enum : int
    {
        GetUserInfo = -1155460313,
        Login = -1327137735,
    }

    public class LoginRpc : RpcRequester, ILoginRpc, ILoginRpc_NoReply
    {
        public override Type InterfaceType => typeof(ILoginRpc);

        public LoginRpc() : base(null)
        {
            DeliveryMethod = DeliveryMethod.Tcp;
        }

        public LoginRpc(ISession target) : base(target)
        {
            DeliveryMethod = DeliveryMethod.Tcp;
        }

        public LoginRpc(ISession target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
            DeliveryMethod = DeliveryMethod.Tcp;
        }

        public ILoginRpc_NoReply WithNoReply()
        {
            return this;
        }

        public LoginRpc WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new LoginRpc(Target, requestWaiter, Timeout);
        }

        public LoginRpc WithTimeout(TimeSpan? timeout)
        {
            return new LoginRpc(Target, RequestWaiter, timeout);
        }

        public async Task<SampleGameCommon.UserInfo> GetUserInfo()
        {
            var _writer_ = NetPool.DataWriterPool.Alloc();
            try
            {
                _writer_.Write((int)ILoginRpc_Enum.GetUserInfo);
                using(var _reader_ = await SendRequestAndReceive(_writer_))
                {
                    return _reader_.Read<SampleGameCommon.UserInfo>();
                }
            }
            finally
            {
                NetPool.DataWriterPool.Free(_writer_);
            }
        }

        public async Task<int> Login(string id, EuNet.Core.ISession session)
        {
            var _writer_ = NetPool.DataWriterPool.Alloc();
            try
            {
                _writer_.Write((int)ILoginRpc_Enum.Login);
                _writer_.Write(id);
                
                using(var _reader_ = await SendRequestAndReceive(_writer_))
                {
                    return _reader_.ReadInt32();
                }
            }
            finally
            {
                NetPool.DataWriterPool.Free(_writer_);
            }
        }

        void ILoginRpc_NoReply.GetUserInfo()
        {
            var _writer_ = NetPool.DataWriterPool.Alloc();
            try
            {
                _writer_.Write((int)ILoginRpc_Enum.GetUserInfo);
                SendRequest(_writer_);
            }
            finally
            {
                NetPool.DataWriterPool.Free(_writer_);
            }
        }

        void ILoginRpc_NoReply.Login(string id, EuNet.Core.ISession session)
        {
            var _writer_ = NetPool.DataWriterPool.Alloc();
            try
            {
                _writer_.Write((int)ILoginRpc_Enum.Login);
                _writer_.Write(id);
                
                SendRequest(_writer_);
            }
            finally
            {
                NetPool.DataWriterPool.Free(_writer_);
            }
        }
    }

    public abstract class LoginRpcServiceAbstract : IRpcInvokable, ILoginRpc
    {
        public abstract Task<SampleGameCommon.UserInfo> GetUserInfo();
        public abstract Task<int> Login(string id, EuNet.Core.ISession session);
        public async Task<bool> Invoke(object _target_, NetDataReader _reader_, NetDataWriter _writer_)
        {
            ISession session = _target_ as ISession;
            var typeEnum = (ILoginRpc_Enum)_reader_.ReadInt32();
            switch(typeEnum)
            {
                case ILoginRpc_Enum.GetUserInfo:
                    {
                        var _result_ = await GetUserInfo();
                        _writer_.Write<SampleGameCommon.UserInfo>(_result_);
                    }
                    break;
                case ILoginRpc_Enum.Login:
                    {
                        var id = _reader_.ReadString();
                        
                        var _result_ = await Login(id, session);
                        _writer_.Write(_result_);
                    }
                    break;
                default: return false;
            }

            return true;
        }
    }

    public class LoginRpcServiceSession : IRpcInvokable
    {
        public async Task<bool> Invoke(object _target_, NetDataReader _reader_, NetDataWriter _writer_)
        {
            ISession session = _target_ as ISession;
            var typeEnum = (ILoginRpc_Enum)_reader_.ReadInt32();
            switch(typeEnum)
            {
                case ILoginRpc_Enum.GetUserInfo:
                    {
                        var _result_ = await (session as ILoginRpc).GetUserInfo();
                        _writer_.Write<SampleGameCommon.UserInfo>(_result_);
                    }
                    break;
                case ILoginRpc_Enum.Login:
                    {
                        var id = _reader_.ReadString();
                        
                        var _result_ = await (session as ILoginRpc).Login(id, session);
                        _writer_.Write(_result_);
                    }
                    break;
                default: return false;
            }

            return true;
        }
    }
}

#endregion
#region SampleGameCommon.IPlayerViewRpc
#if UNITY_EDITOR || UNITY_STANDALONE || UNITY_ANDROID || UNITY_IOS

namespace SampleGameCommon
{
    public interface IPlayerViewRpc_NoReply
    {
        void OnAttack();
        void OnSkill(byte index);
    }

    public enum IPlayerViewRpc_Enum : int
    {
        OnAttack = -1308402450,
        OnSkill = -1297090073,
    }

    public class PlayerViewRpc : RpcRequester, IPlayerViewRpc, IPlayerViewRpc_NoReply
    {
        public override Type InterfaceType => typeof(IPlayerViewRpc);

        public PlayerViewRpc(NetView view, TimeSpan? timeout = null)
            	: base(NetClientGlobal.Instance.Client, new NetViewRequestWaiter(view), timeout)
        {
            DeliveryMethod = DeliveryMethod.Unreliable;
            DeliveryTarget = DeliveryTarget.Others;
        }

        public PlayerViewRpc(ISession target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
            DeliveryMethod = DeliveryMethod.Unreliable;
            DeliveryTarget = DeliveryTarget.Others;
        }

        public PlayerViewRpc ToTarget(DeliveryMethod deliveryMethod, ushort sessionId)
        {
            DeliveryMethod = deliveryMethod;
            DeliveryTarget = DeliveryTarget.Target;
            Extra = sessionId;
            return this;
        }

        public PlayerViewRpc ToMaster(DeliveryMethod deliveryMethod)
        {
            DeliveryMethod = deliveryMethod;
            DeliveryTarget = DeliveryTarget.Master;
            return this;
        }

        public IPlayerViewRpc_NoReply ToOthers(DeliveryMethod deliveryMethod)
        {
            DeliveryMethod = deliveryMethod;
            DeliveryTarget = DeliveryTarget.Others;
            return this;
        }

        public IPlayerViewRpc_NoReply ToAll(DeliveryMethod deliveryMethod)
        {
            DeliveryMethod = deliveryMethod;
            DeliveryTarget = DeliveryTarget.All;
            return this;
        }

        public IPlayerViewRpc_NoReply WithNoReply()
        {
            return this;
        }

        public PlayerViewRpc WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new PlayerViewRpc(Target, requestWaiter, Timeout);
        }

        public PlayerViewRpc WithTimeout(TimeSpan? timeout)
        {
            return new PlayerViewRpc(Target, RequestWaiter, timeout);
        }

        public async Task OnAttack()
        {
            var _writer_ = NetPool.DataWriterPool.Alloc();
            try
            {
                _writer_.Write((int)IPlayerViewRpc_Enum.OnAttack);
                await SendRequestAndWait(_writer_);
            }
            finally
            {
                NetPool.DataWriterPool.Free(_writer_);
            }
        }

        public async Task OnSkill(byte index)
        {
            var _writer_ = NetPool.DataWriterPool.Alloc();
            try
            {
                _writer_.Write((int)IPlayerViewRpc_Enum.OnSkill);
                _writer_.Write(index);
                await SendRequestAndWait(_writer_);
            }
            finally
            {
                NetPool.DataWriterPool.Free(_writer_);
            }
        }

        void IPlayerViewRpc_NoReply.OnAttack()
        {
            var _writer_ = NetPool.DataWriterPool.Alloc();
            try
            {
                _writer_.Write((int)IPlayerViewRpc_Enum.OnAttack);
                SendRequest(_writer_);
            }
            finally
            {
                NetPool.DataWriterPool.Free(_writer_);
            }
        }

        void IPlayerViewRpc_NoReply.OnSkill(byte index)
        {
            var _writer_ = NetPool.DataWriterPool.Alloc();
            try
            {
                _writer_.Write((int)IPlayerViewRpc_Enum.OnSkill);
                _writer_.Write(index);
                SendRequest(_writer_);
            }
            finally
            {
                NetPool.DataWriterPool.Free(_writer_);
            }
        }
    }

    [RequireComponent(typeof(NetView))]
    public abstract class PlayerViewRpcServiceBehaviour : MonoBehaviour, IRpcInvokable, IPlayerViewRpc
    {
        public abstract Task OnAttack();
        public abstract Task OnSkill(byte index);
        public async Task<bool> Invoke(object _target_, NetDataReader _reader_, NetDataWriter _writer_)
        {
            ISession session = _target_ as ISession;
            var typeEnum = (IPlayerViewRpc_Enum)_reader_.ReadInt32();
            switch(typeEnum)
            {
                case IPlayerViewRpc_Enum.OnAttack:
                    {
                        await OnAttack();
                    }
                    break;
                case IPlayerViewRpc_Enum.OnSkill:
                    {
                        var index = _reader_.ReadByte();
                        await OnSkill(index);
                    }
                    break;
                default: return false;
            }

            return true;
        }
    }

    public class PlayerViewRpcServiceView : IRpcInvokable
    {
        public async Task<bool> Invoke(object _target_, NetDataReader _reader_, NetDataWriter _writer_)
        {
            NetView _view_ = _target_ as NetView;
            var typeEnum = (IPlayerViewRpc_Enum)_reader_.ReadInt32();
            switch(typeEnum)
            {
                case IPlayerViewRpc_Enum.OnAttack:
                    {
                        await _view_.FindRpcHandler<IPlayerViewRpc>().OnAttack();
                    }
                    break;
                case IPlayerViewRpc_Enum.OnSkill:
                    {
                        var index = _reader_.ReadByte();
                        await _view_.FindRpcHandler<IPlayerViewRpc>().OnSkill(index);
                    }
                    break;
                default: return false;
            }

            return true;
        }
    }
}

#endif
#endregion
#region SampleGameCommon

namespace SampleGameCommon
{
    public static class RpcEnumHelper
    {
        public static string GetEnumName(int rpcNameHash)
        {
            switch(rpcNameHash)
            {
                case -1155460313: return "ILoginRpc.GetUserInfo";
                case -1327137735: return "ILoginRpc.Login";
                case -1308402450: return "IPlayerViewRpc.OnAttack";
                case -1297090073: return "IPlayerViewRpc.OnSkill";
            }

            return string.Empty;
        }
    }
}

#endregion
#region SampleGameCommon.Resolvers

namespace SampleGameCommon.Resolvers
{
    public sealed class GeneratedResolver : INetDataFormatterResolver
    {
        public static readonly GeneratedResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public INetDataFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            public static readonly INetDataFormatter<T> Formatter;

            static FormatterCache()
            {
                Formatter = (INetDataFormatter<T>)GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly Dictionary<Type, object> FormatterMap = new Dictionary<Type, object>() {
        };
        internal static object GetFormatter(Type t)
        {
            TypeInfo ti = t.GetTypeInfo();
            if (ti.IsGenericType)
            {
                Type genericType = ti.GetGenericTypeDefinition();
                object formatterType;
                if (FormatterMap.TryGetValue(genericType, out formatterType))
                {
                    return Activator.CreateInstance(((Type)formatterType).MakeGenericType(ti.GenericTypeArguments));
                }
            }

            else
            {
                object formatter;
                if (FormatterMap.TryGetValue(t, out formatter))
                {
                    return formatter;
                }
            }

            return null;
        }
    }
}

#endregion
